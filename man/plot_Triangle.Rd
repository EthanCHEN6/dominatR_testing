% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_triangle.R
\name{plot_triangle}
\alias{plot_triangle}
\title{Triangle (ternary) dominance plot}
\usage{
plot_triangle(
  x,
  column_name = NULL,
  entropyrange = c(0, Inf),
  maxvaluerange = c(0, Inf),
  col = c("darkred", "darkgreen", "darkblue"),
  background_col = "whitesmoke",
  output_table = TRUE,
  plotAll = TRUE,
  cex = 1,
  pch = 16,
  assay_name = NULL
)
}
\arguments{
\item{x}{A numeric \code{data.frame}/\code{matrix} **or**
a \code{SummarizedExperiment}.}

\item{column_name}{Character. Names (or indices) of the three columns to
visualise. If \code{NULL}, the first three numeric columns are used.}

\item{entropyrange}{Numeric. Keep points whose entropy lies inside
this interval. Default is \code{c(0,Inf)}}

\item{maxvaluerange}{Numeric. Keep points whose values lies inside
this interval. Default is \code{c(0,Inf)}}

\item{col}{Character. Colors for each variable.}

\item{background_col}{Character. Color for the observations outside \code{entropyrange} and \code{maxvaluerange}}

\item{output_table}{Logical. If \code{TRUE} returns the processed data frame.}

\item{plotAll}{Logical. If \code{TRUE}, filtered points are shown in
\code{background_col}; if \code{FALSE}, they are omitted.}

\item{cex, pch}{Base-graphics point size / symbol.}

\item{assay_name}{(SummarizedExperiment only) Which assay to use. Default:
the first assay.}
}
\value{
If \code{output_table = TRUE}, a \code{data.frame} with the original three
columns plus:
\itemize{
  \item \code{comx}, \code{comy}  — Cartesian coordinates in the triangle;
  \item \code{color}              — final plotting colour;
  \item \code{entropy}            — Entropy scores for each gene;
  \item \code{max_counts}         — Maximum score across variables
}
}
\description{
Creates a triangular (ternary) scatter plot for **three** numeric variables
Each point is coloured by the variable with the largest value and can be
filtered by (i) Entropy score ranging from (0 to 1.585) and (ii) overall score

The plot is useful for visualising “winner-takes-all” behaviour in three-way
comparisons, e.g. gene expression in *A*, *B*, *C* conditions.
}
\details{
The function expects three numeric columns. If the experiment has more than three columns, the name of the columns of interest can be specified by using the parameter \code{column_name}. If \code{x} is
a \code{SummarizedExperiment}, it extracts the indicated assay and extracts the columns of interest

It also uses:
  - \code{centmass()} for computing \code{comx} and \code{comy}.
  - \code{entropy()} for computing Shannon entropy, stored in the \code{entropy} column.  Between three variables, entropy rangeS between 0 and 1.585.

The ternary vertices are fixed at
\eqn{( \sin(0),  \cos(0) )},
\eqn{( \sin(2\pi/3),  \cos(2\pi/3) )} and
\eqn{( \sin(4\pi/3),  \cos(4\pi/3) )}.
}
\examples{
library(SummarizedExperiment)
library(airway)
data('airway')
se <- airway

## Normalize the data first using tpm_normalization
rowData(se)$gene_length <- rowData(se)$gene_seq_end - rowData(se)$gene_seq_start

se <- tpm_normalization(se, log_trans = TRUE, new_assay_name = 'tpm_norm')

# -------------------------------
# 1) Using a data.frame
# -------------------------------

df <- assay(se, 'tpm_norm') |> as.data.frame()


# Choose three columns of interest, in this case 'SRR1039508', 'SRR1039516' and 'SRR1039512'

# Default Behaviour
plot_triangle(x = df,
              column_name = c("SRR1039508", "SRR1039516", 'SRR1039512'),
              output_table = FALSE)

# Colors can be modified
plot_triangle(x = df,
              column_name = c("SRR1039508", "SRR1039516", 'SRR1039512'),
              output_table = FALSE,
              col = c('indianred', 'lightgreen', 'lightblue'))

# Emphasis can be applied to highly dominant variables by controling entropy parameter,
# values outside of that range will be colored smokewhite.
plot_triangle(x = df,
              column_name = c("SRR1039508", "SRR1039516", 'SRR1039512'),
              output_table = FALSE,
              col = c('indianred', 'lightgreen', 'lightblue'),
              entropyrange = c(0, 0.1))

# Points in the center are a reflection of genes with expression levels = 0.
# This can be modified by adjusting the maxvalue range

plot_triangle(x = df,
              column_name = c("SRR1039508", "SRR1039516", 'SRR1039512'),
              output_table = FALSE,
              col = c('indianred', 'lightgreen', 'lightblue'),
              entropyrange = c(0, 0.1),
              maxvaluerange = c(0.1, Inf))

# By controling entropy range, you can observe different types of genes.
# Values closer to 0 represent dominance and closer to 1.6 shareness.

plot_triangle(x = df,
              column_name = c("SRR1039508", "SRR1039516", 'SRR1039512'),
              output_table = FALSE,
              col = c('indianred', 'lightgreen', 'lightblue'),
              entropyrange = c(0, 0.4),
              maxvaluerange = c(0.1, Inf))

plot_triangle(x = df,
              column_name = c("SRR1039508", "SRR1039516", 'SRR1039512'),
              output_table = FALSE,
              col = c('indianred', 'lightgreen', 'lightblue'),
              entropyrange = c(0.4, 1.3),
              maxvaluerange = c(0.1, Inf))

plot_triangle(x = df,
              column_name = c("SRR1039508", "SRR1039516", 'SRR1039512'),
              output_table = FALSE,
              col = c('indianred', 'lightgreen', 'lightblue'),
              entropyrange = c(1.3, Inf),
              maxvaluerange = c(0.1, Inf))

# Same analysis can be performed by filtering out genes with low expression values

plot_triangle(x = df,
              column_name = c("SRR1039508", "SRR1039516", 'SRR1039512'),
              output_table = FALSE,
              col = c('indianred', 'lightgreen', 'lightblue'),
              entropyrange = c(1.2, Inf),
              maxvaluerange = c(2, Inf))

plot_triangle(x = df,
              column_name = c("SRR1039508", "SRR1039516", 'SRR1039512'),
              output_table = FALSE,
              col = c('indianred', 'lightgreen', 'lightblue'),
              entropyrange = c(1.2, Inf),
              maxvaluerange = c(5, Inf))

plot_triangle(x = df,
              column_name = c("SRR1039508", "SRR1039516", 'SRR1039512'),
              output_table = FALSE,
              col = c('indianred', 'lightgreen', 'lightblue'),
              entropyrange = c(1.2, Inf),
              maxvaluerange = c(10, Inf))

# Background points can be removed
plot_triangle(x = df,
              column_name = c("SRR1039508", "SRR1039516", 'SRR1039512'),
              output_table = FALSE,
              col = c('indianred', 'lightgreen', 'lightblue'),
              entropyrange = c(1.2, Inf),
              maxvaluerange = c(2, Inf),
              plotAll = FALSE)
# -------------------------------
# 1) Using a SummarizedExperiment
# -------------------------------


plot_triangle(x = se,
              column_name = c("SRR1039508", "SRR1039516", 'SRR1039512'),
              output_table = FALSE,
              col = c('darkred', 'darkgreen', 'darkblue'),
              entropyrange = c(0, 0.4),
              maxvaluerange = c(0.1, Inf),
              assay_name = 'tpm_norm')

plot_triangle(x = se,
              column_name = c("SRR1039508", "SRR1039516", 'SRR1039512'),
              output_table = FALSE,
              col = c('darkred', 'darkgreen', 'darkblue'),
              entropyrange = c(0.4, 1.3),
              maxvaluerange = c(0.1, Inf),
              assay_name = 'tpm_norm')

plot_triangle(x = se,
              column_name = c("SRR1039508", "SRR1039516", 'SRR1039512'),
              output_table = FALSE,
              col = c('darkred', 'darkgreen', 'darkblue'),
              entropyrange = c(1.3, Inf),
              maxvaluerange = c(0.1, Inf),
              assay_name = 'tpm_norm')


### Obtaining the DF output for the analysis

object = plot_triangle(x = se,
                       column_name = c("SRR1039508", "SRR1039516", 'SRR1039512'),
                       output_table = TRUE,
                       col = c('darkred', 'darkgreen', 'darkblue'),
                       entropyrange = c(1.3, Inf),
                       maxvaluerange = c(0.1, Inf),
                       assay_name = 'tpm_norm')

head(object)

}
